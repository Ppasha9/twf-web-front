import React, { ChangeEvent, ChangeEventHandler, FC, useState } from "react";
import { useFieldArray, useFormContext } from "react-hook-form";

import "./level-form.scss";
import MathQuillEditor from "../math-quill-editor/math-quill-editor";
import Icon from "@mdi/react";
import {
  mdiArrowExpandLeft,
  mdiArrowExpandRight,
  mdiClose,
  mdiRobot,
  mdiWrench,
} from "@mdi/js";

export enum LevelType {
  AUTO = "автоматический",
  MANUAL = "ручной",
}

export interface LevelFormProps {
  index: number;
  defaultValue: any;
  remove: (index: number) => void;
  // // manual
  // startExpression: string;
  // goalType: string;
  // goalExpression: string;
  // goalDetails: string;
  // // auto
  // operations: string;
  // subjectTypes: string;
  // stepsCountIntervals: string;
  // implicitTransformationsCount: string;
  // autoGeneratedLevelsCount: string;
}

const LevelForm: FC<LevelFormProps> = ({
  index,
  defaultValue,
  remove,
}: LevelFormProps) => {
  const { register, getValues, control } = useFormContext();

  const [currentLevelType, setCurrentLevelType] = useState<LevelType>(
    defaultValue.levelType
  );

  const toggleLevelType = () => {
    setCurrentLevelType(
      currentLevelType === LevelType.MANUAL ? LevelType.AUTO : LevelType.MANUAL
    );
  };

  const goalTypes = [
    "Сведение к целевому выражению",
    "Сведение к КНФ",
    "Сведение к ДНФ",
    "Разложения на множители",
    "Вычисление",
    "Сокращение",
    "Упрощение",
    "Другое",
  ];

  const [goalType, setGoalType] = useState("Сведение к целевому выражению");

  const [showAddFieldsManual, setShowAddFieldsManual] = useState(false);

  // const [currentGoalType, setCurrentGoalType] = useState("Тип цели 1");

  return (
    <div className="automatic-level-form">
      <div className="automatic-level-form__level-number">{index + 1}.</div>
      <div className="automatic-level-form__level-type-icon">
        <Icon
          path={currentLevelType === LevelType.AUTO ? mdiRobot : mdiWrench}
          size={2}
        />
      </div>
      <div className="form-group">
        <label>Тип уровня</label>
        <select
          name={`levels[${index}].levelType`}
          className="form-control"
          ref={register()}
          // defaultValue={defaultValue.levelType}
          value={currentLevelType}
          onChange={() => toggleLevelType()}
        >
          <option>{LevelType.MANUAL}</option>
          <option>{LevelType.AUTO}</option>
        </select>
      </div>
      <div className="form-group">
        <label>Имя</label>
        <input
          name={`levels[${index}].name`}
          className="form-control"
          type="text"
          ref={register()}
          defaultValue={defaultValue.name}
        />
      </div>
      {currentLevelType === LevelType.MANUAL ? (
        <>
          <div className="form-group">
            <label>Стартовое выражение</label>
            <input
              name={`levels[${index}].startExpression`}
              className="form-control"
              type="text"
              ref={register()}
              defaultValue={defaultValue.startExpression}
            />
          </div>
          <div className="form-group">
            <label>Тип цели</label>
            <select
              name={`levels[${index}].goalType`}
              className="form-control"
              ref={register()}
              defaultValue={defaultValue.goalType}
              onChange={(event: any) => {
                setGoalType(event.target.value);
              }}
            >
              {goalTypes.map((type: string, i) => {
                return <option key={i}>{type}</option>;
              })}
            </select>
          </div>
          {(goalType === "Сведение к целевому выражению" ||
            goalType === "Упрощение") && (
            <div className="form-group">
              <label>Конечное выражение</label>
              <input
                name={`levels[${index}].goalExpression`}
                className="form-control"
                type="text"
                ref={register()}
                defaultValue={defaultValue.goalExpression}
              />
            </div>
          )}
          {(goalType === "Сведение к КНФ" || goalType === "Сведение к ДНФ") && (
            <div className="form-group">
              <label>Натуральное число</label>
              <input
                name={`levels[${index}].goalNaturalNumber`}
                className="form-control"
                type="number"
                ref={register()}
                defaultValue={defaultValue.goalNaturalNumber}
              />
            </div>
          )}
        </>
      ) : (
        <>
          <div className="form-group">
            <label>Операции</label>
            <input
              name={`levels[${index}].operations`}
              className="form-control"
              type="text"
              ref={register()}
              defaultValue={defaultValue.operations}
            />
          </div>
          <div className="form-group">
            <label>Предметная область</label>
            <input
              name={`levels[${index}].subjectTypes`}
              className="form-control"
              type="text"
              ref={register()}
              defaultValue={defaultValue.subjectTypes}
            />
          </div>
          <div className="form-group">
            <label>Интервал шагов</label>
            <input
              name={`levels[${index}].stepsCountIntervals`}
              className="form-control"
              type="number"
              ref={register()}
              defaultValue={defaultValue.stepsCountIntervals}
            />
          </div>
          <div className="form-group">
            <label>Количество явных преобразований</label>
            <input
              name={`levels[${index}].stepsCountIntervals`}
              className="form-control"
              type="number"
              ref={register()}
              defaultValue={defaultValue.stepsCountIntervals}
            />
          </div>
          <div className="form-group">
            <label>Количество автогенерируемых уровней</label>
            <input
              name={`levels[${index}].countOfAutoGeneratedLevels`}
              className="form-control"
              type="number"
              ref={register()}
              defaultValue={defaultValue.countOfAutoGeneratedLevels}
            />
          </div>
        </>
      )}
      {showAddFieldsManual && (
        <>
          <div className="form-group">
            <label>Предметная область</label>
            <input
              name={`levels[${index}].subjectTypes`}
              className="form-control"
              type="text"
              ref={register()}
              defaultValue={defaultValue.subjectTypes}
            />
          </div>
          <div className="form-group">
            <label>Дополнительные пакеты правил</label>
            <input
              name={`levels[${index}].additionalPacks`}
              className="form-control"
              type="text"
              ref={register()}
              defaultValue={defaultValue.additionalPacks}
            />
          </div>
          <div className="form-group">
            <label>Личный пакет правил</label>
            <input
              name={`levels[${index}].customLevelPack`}
              className="form-control"
              type="text"
              ref={register()}
              defaultValue={defaultValue.customLevelPack}
            />
          </div>
        </>
      )}
      <button
        className="automatic-level-form__delete-button"
        onClick={() => {
          setShowAddFieldsManual(!showAddFieldsManual);
        }}
      >
        <Icon
          path={showAddFieldsManual ? mdiArrowExpandLeft : mdiArrowExpandRight}
          size={2}
        />
      </button>
      <button
        className="automatic-level-form__delete-button"
        onClick={() => {
          if (window.confirm(`Вы точно хотите удалить уровень ${index + 1}?`)) {
            remove(index);
          }
        }}
      >
        <Icon path={mdiClose} size={2} />
      </button>
    </div>
  );
};

export default LevelForm;
