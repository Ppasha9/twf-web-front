// libs
import React, { FC, RefObject, useState } from "react";
// hooks
import { useFormContext } from "react-hook-form";
import useMergedRef from "@react-hook/merged-ref";
// components
import Icon from "@mdi/react";
import AppModal from "../app-modal/app-modal";
import MixedInput from "../mixed-input/mixed-input";
// styles
import "./level-form.scss";
// icons
import {
  mdiArrowDown,
  mdiArrowExpandLeft,
  mdiArrowExpandRight,
  mdiArrowUp,
  mdiClose,
  mdiContentCopy,
  mdiEye,
  mdiFileEye,
  mdiPlayCircle,
  mdiRobot,
  mdiWrench,
} from "@mdi/js";

export enum LevelType {
  AUTO = "автоматический",
  MANUAL = "ручной",
}

export interface Level {
  name: string;
  levelType: LevelType;
  startExpression: string;
  goalType: string;
  goalExpression: string;
  goalNaturalNumber: number;
  subjectTypes: string;
  additionalPacks: string;
  customLevelPack: string;
  expectedSteps: number;
  expectedTime: number;
  levelNameEn: string;
  levelNameRu: string;
  levelCode: string;
  autoGeneratedLevelsCount: number;
  operations: string;
  stepsCountInterval: string;
  implicitTransformationsCount: number;
}

export interface LevelFormProps {
  index: number;
  defaultValue: any;
  remove: (index: number) => void;
  swap: (from: number, to: number) => void;
  append: (level: Level) => void;
  updateDemo: (index: number) => void;
}

const LevelForm: FC<LevelFormProps> = (props: LevelFormProps) => {
  const { index, defaultValue, remove, swap, append, updateDemo } = props;
  const { register, getValues } = useFormContext();

  const goalTypes = [
    "Сведение к целевому выражению",
    "Сведение к КНФ",
    "Сведение к ДНФ",
    "Разложения на множители",
    "Вычисление",
    "Сокращение",
    "Упрощение",
    "Другое",
  ];
  const [goalType, setGoalType] = useState(
    defaultValue.goalType || "Сведение к целевому выражению"
  );
  const startExpressionRef: RefObject<HTMLInputElement> = React.createRef();
  const goalExpressionRef: RefObject<HTMLInputElement> = React.createRef();

  const [hiddenFields, setHiddenFields] = useState<any>({
    name: false,
    levelType: false,
    startExpression: false,
    goalType: false,
    goalExpression: false,
    goalNaturalNumber: false,
    subjectTypes: false,
    additionalPacks: false,
    customLevelPack: false,
    expectedSteps: false,
    expectedTime: false,
    levelNameEn: false,
    levelNameRu: false,
    levelCode: false,
    autoGeneratedLevelsCount: false,
    operations: false,
    stepsCountInterval: false,
    implicitTransformationsCount: false,
  });
  const [showHiddenFieldsModal, setShowHiddenFieldsModal] = useState(false);

  const toggleInputVisibility = (inputName: string, hide: boolean): void => {
    setHiddenFields((prevState: any) => {
      return {
        ...prevState,
        [inputName]: hide,
      };
    });
  };

  const ActionButton = ({
    action,
    mdiIconPath,
    size,
    margin,
  }: {
    mdiIconPath: string;
    size: number;
    action: () => any;
    margin?: string;
  }): JSX.Element => {
    return (
      <button
        className="level-form__action-button"
        style={{ margin: margin ? margin : "" }}
        onClick={() => {
          action();
        }}
      >
        <Icon path={mdiIconPath} size={size} />
      </button>
    );
  };

  const inputs: { [key: string]: JSX.Element } = {
    levelType: (
      <div className="form-group">
        <label>Тип уровня</label>
        <input
          type="text"
          className="form-control"
          name={`levels[${index}].levelType`}
          defaultValue={defaultValue.levelType}
          ref={register()}
          readOnly
        />
      </div>
    ),
    name: (
      <div className="form-group">
        <label>Имя</label>
        <input
          type="text"
          className="form-control"
          name={`levels[${index}].name`}
          defaultValue={defaultValue.name}
          ref={register()}
        />
      </div>
    ),
    startExpression: (
      <div
        className="form-group"
        style={{
          display:
            defaultValue.levelType === LevelType.AUTO &&
            hiddenFields.startExpression
              ? "none"
              : "block",
        }}
      >
        <label>Стартовое выражение</label>
        {defaultValue.levelType === LevelType.AUTO && (
          <ActionButton
            mdiIconPath={mdiEye}
            size={1.5}
            action={() => toggleInputVisibility("startExpression", true)}
            margin="0 0 0 0.5rem"
          />
        )}
        <input
          name={`levels[${index}].startExpression`}
          className="form-control"
          type="text"
          // eslint-disable-next-line
          ref={useMergedRef(register(), startExpressionRef)}
          defaultValue={defaultValue.startExpression}
        />
        <MixedInput inputRef={startExpressionRef} />
      </div>
    ),
    goalType: (
      <div
        className="form-group"
        style={{
          display:
            defaultValue.levelType === LevelType.AUTO && hiddenFields.goalType
              ? "none"
              : "block",
        }}
      >
        <label>Тип цели</label>
        {defaultValue.levelType === LevelType.AUTO && (
          <ActionButton
            mdiIconPath={mdiEye}
            size={1.5}
            action={() => toggleInputVisibility("goalType", true)}
            margin="0 0 0 0.5rem"
          />
        )}
        <select
          name={`levels[${index}].goalType`}
          className="form-control"
          ref={register()}
          value={goalType}
          onChange={(event: any) => {
            setGoalType(event.target.value);
          }}
        >
          {goalTypes.map((type: string, i) => {
            return <option key={i}>{type}</option>;
          })}
        </select>
      </div>
    ),
    goalDetails: (
      <>
        <div
          className="form-group"
          style={{
            display:
              defaultValue.levelType === LevelType.AUTO &&
              hiddenFields.goalExpression
                ? "none"
                : goalType === "Сведение к целевому выражению" ||
                  goalType === "Упрощение"
                ? "block"
                : "none",
          }}
        >
          <label>Конечное выражение</label>
          {defaultValue.levelType === LevelType.AUTO && (
            <ActionButton
              mdiIconPath={mdiEye}
              size={1.5}
              action={() => toggleInputVisibility("goalExpression", true)}
              margin="0 0 0 0.5rem"
            />
          )}
          <input
            name={`levels[${index}].goalExpression`}
            className="form-control"
            type="text"
            // eslint-disable-next-line
            ref={useMergedRef(register(), goalExpressionRef)}
            defaultValue={defaultValue.goalExpression}
          />
          <MixedInput inputRef={goalExpressionRef} />
        </div>
        <div
          className="form-group"
          style={{
            display:
              goalType === "Сведение к КНФ" || goalType === "Сведение к ДНФ"
                ? "block"
                : "none",
          }}
        >
          <label>Натуральное число</label>
          <input
            name={`levels[${index}].goalNaturalNumber`}
            className="form-control"
            type="number"
            ref={register()}
            defaultValue={defaultValue.goalNaturalNumber}
          />
        </div>
      </>
    ),
    subjectTypes: (
      <div
        className="form-group"
        style={{
          display:
            defaultValue.levelType === LevelType.MANUAL &&
            hiddenFields.subjectTypes
              ? "none"
              : "block",
        }}
      >
        <label>Предметая область</label>
        {defaultValue.levelType === LevelType.MANUAL && (
          <ActionButton
            mdiIconPath={mdiEye}
            size={1.5}
            action={() => toggleInputVisibility("subjectTypes", true)}
            margin="0 0 0 0.5rem"
          />
        )}
        <input
          name={`levels[${index}].subjectTypes`}
          className="form-control"
          type="text"
          ref={register()}
          defaultValue={defaultValue.subjectTypes}
        />
      </div>
    ),
    additionalPacks: (
      <div
        className="form-group"
        style={{
          display: hiddenFields.additionalPacks ? "none" : "block",
        }}
      >
        <label>Дополнительные пакеты правил</label>
        <ActionButton
          mdiIconPath={mdiEye}
          size={1.5}
          action={() => toggleInputVisibility("additionalPacks", true)}
          margin="0 0 0 0.5rem"
        />
        <input
          name={`levels[${index}].additionalPacks`}
          className="form-control"
          type="text"
          ref={register()}
          defaultValue={defaultValue.additionalPacks}
        />
      </div>
    ),
    customLevelPack: (
      <div
        className="form-group"
        style={{
          display: hiddenFields.customLevelPack ? "none" : "block",
        }}
      >
        <label>Свой пакет правил</label>
        <ActionButton
          mdiIconPath={mdiEye}
          size={1.5}
          action={() => toggleInputVisibility("customLevelPack", true)}
          margin="0 0 0 0.5rem"
        />
        <input
          name={`levels[${index}].customLevelPack`}
          className="form-control"
          type="text"
          ref={register()}
          defaultValue={defaultValue.customLevelPack}
        />
      </div>
    ),
    expectedSteps: (
      <div
        className="form-group"
        style={{
          display: hiddenFields.expectedSteps ? "none" : "block",
        }}
      >
        <label>Ожидаемое число шагов</label>
        <ActionButton
          mdiIconPath={mdiEye}
          size={1.5}
          action={() => toggleInputVisibility("expectedSteps", true)}
          margin="0 0 0 0.5rem"
        />
        <input
          name={`levels[${index}].expectedSteps`}
          className="form-control"
          type="text"
          ref={register()}
          defaultValue={defaultValue.expectedSteps}
        />
      </div>
    ),
    expectedTime: (
      <div
        className="form-group"
        style={{
          display:
            defaultValue.levelType === LevelType.MANUAL &&
            hiddenFields.expectedTime
              ? "none"
              : "block",
        }}
      >
        <label>Ожидаемое время</label>
        {defaultValue.levelType === LevelType.MANUAL && (
          <ActionButton
            mdiIconPath={mdiEye}
            size={1.5}
            action={() => toggleInputVisibility("expectedTime", true)}
            margin="0 0 0 0.5rem"
          />
        )}
        <input
          name={`levels[${index}].expectedTime`}
          className="form-control"
          type="text"
          ref={register()}
          defaultValue={defaultValue.expectedTime}
        />
      </div>
    ),
    levelNameEn: (
      <div
        className="form-group"
        style={{
          display: hiddenFields.levelNameEn ? "none" : "block",
        }}
      >
        <label>Имя на английском</label>
        <ActionButton
          mdiIconPath={mdiEye}
          size={1.5}
          action={() => toggleInputVisibility("levelNameEn", true)}
          margin="0 0 0 0.5rem"
        />
        <input
          name={`levels[${index}].levelNameEn`}
          className="form-control"
          type="text"
          ref={register()}
          defaultValue={defaultValue.levelNameEn}
        />
      </div>
    ),
    levelNameRu: (
      <div
        className="form-group"
        style={{
          display: hiddenFields.levelNameRu ? "none" : "block",
        }}
      >
        <label>Имя на русском</label>
        <ActionButton
          mdiIconPath={mdiEye}
          size={1.5}
          action={() => toggleInputVisibility("levelNameRu", true)}
          margin="0 0 0 0.5rem"
        />
        <input
          name={`levels[${index}].levelNameRu`}
          className="form-control"
          type="text"
          ref={register()}
          defaultValue={defaultValue.levelNameRu}
        />
      </div>
    ),
    levelCode: (
      <div
        className="form-group"
        style={{
          display: hiddenFields.levelCode ? "none" : "block",
        }}
      >
        <label>Код уровня</label>
        <ActionButton
          mdiIconPath={mdiEye}
          size={1.5}
          action={() => toggleInputVisibility("levelCode", true)}
          margin="0 0 0 0.5rem"
        />
        <input
          name={`levels[${index}].levelCode`}
          className="form-control"
          type="text"
          ref={register()}
          defaultValue={defaultValue.levelCode}
        />
      </div>
    ),
    autoGeneratedLevelsCount: (
      <div
        className="form-group"
        style={{
          display:
            defaultValue.levelType === LevelType.MANUAL &&
            hiddenFields.autoGeneratedLevelsCount
              ? "none"
              : "block",
        }}
      >
        <label>Количество автогенерируемых уровней</label>
        {defaultValue.levelType === LevelType.MANUAL && (
          <ActionButton
            mdiIconPath={mdiEye}
            size={1.5}
            action={() =>
              toggleInputVisibility("autoGeneratedLevelsCount", true)
            }
            margin="0 0 0 0.5rem"
          />
        )}
        <input
          name={`levels[${index}].autoGeneratedLevelsCount`}
          className="form-control"
          type="text"
          ref={register()}
          defaultValue={defaultValue.autoGeneratedLevelsCount}
        />
      </div>
    ),
    operations: (
      <div
        className="form-group"
        style={{
          display:
            defaultValue.levelType === LevelType.MANUAL &&
            hiddenFields.operations
              ? "none"
              : "block",
        }}
      >
        <label>Операции</label>
        {defaultValue.levelType === LevelType.MANUAL && (
          <ActionButton
            mdiIconPath={mdiEye}
            size={1.5}
            action={() => toggleInputVisibility("operations", true)}
            margin="0 0 0 0.5rem"
          />
        )}
        <input
          name={`levels[${index}].operations`}
          className="form-control"
          type="text"
          ref={register()}
          defaultValue={defaultValue.operations}
        />
      </div>
    ),
    stepsCountInterval: (
      <div
        className="form-group"
        style={{
          display:
            defaultValue.levelType === LevelType.MANUAL &&
            hiddenFields.stepsCountInterval
              ? "none"
              : "block",
        }}
      >
        <label>Интервал шагов</label>
        {defaultValue.levelType === LevelType.MANUAL && (
          <ActionButton
            mdiIconPath={mdiEye}
            size={1.5}
            action={() => toggleInputVisibility("stepsCountInterval", true)}
            margin="0 0 0 0.5rem"
          />
        )}
        <input
          name={`levels[${index}].stepsCountInterval`}
          className="form-control"
          type="text"
          ref={register()}
          defaultValue={defaultValue.stepsCountInterval}
        />
      </div>
    ),
    implicitTransformationsCount: (
      <div
        className="form-group"
        style={{
          display:
            defaultValue.levelType === LevelType.MANUAL &&
            hiddenFields.implicitTransformationsCount
              ? "none"
              : "block",
        }}
      >
        <label>Количество неявных преобразований</label>
        {defaultValue.levelType === LevelType.MANUAL && (
          <ActionButton
            mdiIconPath={mdiEye}
            size={1.5}
            action={() =>
              toggleInputVisibility("implicitTransformationsCount", true)
            }
            margin="0 0 0 0.5rem"
          />
        )}
        <input
          name={`levels[${index}].implicitTransformationsCount`}
          className="form-control"
          type="text"
          ref={register()}
          defaultValue={defaultValue.implicitTransformationsCount}
        />
      </div>
    ),
  };

  const [showAddFields, setShowAddFields] = useState(false);

  const manualLevelBasicInputs = [
    inputs.name,
    inputs.startExpression,
    inputs.goalType,
    inputs.goalDetails,
  ];

  const manualLevelAdditionalInputs = [
    inputs.subjectTypes,
    inputs.additionalPacks,
    inputs.customLevelPack,
    inputs.expectedSteps,
    inputs.expectedTime,
    inputs.levelNameEn,
    inputs.levelNameRu,
    inputs.levelCode,
    inputs.autoGeneratedLevelsCount,
    inputs.operations,
    inputs.stepsCountInterval,
    inputs.implicitTransformationsCount,
  ];

  const autoLevelBasicInputs = [
    inputs.name,
    inputs.operations,
    inputs.subjectTypes,
    inputs.stepsCountInterval,
    inputs.implicitTransformationsCount,
    inputs.autoGeneratedLevelsCount,
  ];

  const autoLevelAdditionalInputs = [
    inputs.expectedTime,
    inputs.startExpression,
    inputs.additionalPacks,
    inputs.customLevelPack,
    inputs.goalType,
    inputs.goalDetails,
    inputs.expectedSteps,
    inputs.levelNameEn,
    inputs.levelNameRu,
    inputs.levelCode,
  ];

  return (
    <div className="level-form">
      <button
        className="level-form__action-button"
        style={{ marginRight: "0.5rem" }}
        onClick={() => {
          append({
            ...getValues().levels[index],
            levelType: defaultValue.levelType,
          });
        }}
      >
        <Icon path={mdiContentCopy} size={1.5} />
      </button>
      <button
        className="level-form__action-button"
        style={{ marginRight: "0.5rem" }}
        onClick={() => {
          if (index !== 0) {
            swap(index, index - 1);
          }
        }}
      >
        <Icon path={mdiArrowUp} size={1.5} />
      </button>
      <button
        className="level-form__action-button"
        style={{ marginRight: "1rem" }}
        onClick={() => {
          if (index !== getValues().levels.length - 1) {
            swap(index, index + 1);
          }
        }}
      >
        <Icon path={mdiArrowDown} size={1.5} />
      </button>
      <div className="level-form__level-number">{index + 1}.</div>
      {defaultValue.levelType === LevelType.AUTO ? (
        <>
          <span className="level-form__level-type-icon">
            <Icon path={mdiRobot} size={2} />
          </span>
          {autoLevelBasicInputs.map((level: JSX.Element, i: number) => {
            return <div key={i}>{level}</div>;
          })}
          {autoLevelAdditionalInputs.map((level: JSX.Element, i: number) => {
            return (
              <div
                key={i}
                style={{ display: showAddFields ? "block" : "none" }}
              >
                {level}
              </div>
            );
          })}
        </>
      ) : (
        <>
          <span className="level-form__level-type-icon">
            <Icon path={mdiWrench} size={2} />
          </span>
          {manualLevelBasicInputs.map((level: JSX.Element, i: number) => {
            return <div key={i}>{level}</div>;
          })}
          {manualLevelAdditionalInputs.map((level: JSX.Element, i: number) => {
            return (
              <div
                key={i}
                style={{ display: showAddFields ? "block" : "none" }}
              >
                {level}
              </div>
            );
          })}
        </>
      )}
      <button
        className="level-form__action-button"
        onClick={() => {
          setShowAddFields(!showAddFields);
        }}
      >
        <Icon
          path={showAddFields ? mdiArrowExpandLeft : mdiArrowExpandRight}
          size={2}
        />
      </button>
      <button
        className="level-form__action-button"
        onClick={() => {
          if (window.confirm(`Вы точно хотите удалить уровень ${index + 1}?`)) {
            remove(index);
          }
        }}
      >
        <Icon path={mdiClose} size={2} />
      </button>
      <ActionButton
        mdiIconPath={mdiFileEye}
        size={2}
        action={() => {
          setShowHiddenFieldsModal(true);
        }}
      />
      <ActionButton
        mdiIconPath={mdiPlayCircle}
        size={2}
        action={() => {
          updateDemo(index);
        }}
      />
      <AppModal
        isOpen={showHiddenFieldsModal}
        close={() => setShowHiddenFieldsModal(false)}
      >
        {Object.keys(hiddenFields).filter((fieldName: string) => {
          return hiddenFields[fieldName];
        }).length === 0
          ? "Нет скрытых полей"
          : Object.keys(hiddenFields)
              .filter((fieldName: string) => {
                return hiddenFields[fieldName];
              })
              .map((fieldName: string, i: number) => {
                return (
                  <div key={i}>
                    <ActionButton
                      mdiIconPath={mdiEye}
                      size={2}
                      action={() => toggleInputVisibility(fieldName, false)}
                      margin="0 2rem 0 0 0"
                    />
                    <span>{fieldName}</span>
                  </div>
                );
              })}
      </AppModal>
    </div>
  );
};

export default LevelForm;
